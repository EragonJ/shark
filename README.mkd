Introduction
============

It's an integrated class that you can design you plurk bot easily with **shark**. I'm still working on it and try to make it more user-friendly. In this way, you can happily design your own bot to keep watch any plurk posted by your friends and make a instant response to it!

Installation
============

You have to download php-plurk-api from [Here](http://code.google.com/p/php-plurk-api/) and then require **plurk_api.php**
and **shark.php** together in **your_bot.php**. After some configurations set , then it's time to use it !

Here comes the demo of installation (your_bot.php) flow:

		require('plurk_api.php');
		require('shark.php');

		$apikey = 'xxx';
		$username = 'test';
		$password = 'test';

		$plurk = new shark();
		$plurk->login($apikey,$username,$password);
		$plurk->set_rules('smile|laugh'); 
		$plurk->set_responses('I detect "token" and leave the response by your_bot');
		$plurk->set_save(true);
		$plurk->run();

Usage
=====

a.Constructor
	you can choose to run infinitely or not.
	$infi: your decision. the default is true.
	$logname: It's shark's log name that can help you to memorize the permanent link of the plurk. The default is 'sharklog'
	
		new shark($infi,$logname)

b.Login
	it's default action designed in php-plurk-api. You have to pass 3 parameters as follows:
	$api: Your API key
	$username: Your username
	$password: Your password

		$this->login($api,$username,$password);

c.Rules
	You can choose which word to match as your token
	Because I use mb_ereg here(to support multi-byte words),you can use any regular expression which is POSIX extended.
	$token: Your specific matching word (or "regular expression" here)

		$this->set_rules($token);

	example:
		
		$this->set_rules("測試|[Tt]est");

d.Responses
	You can decide what the responses will be.
	If you use a relative path for a JSON-type list for response, you can just put the link here!
	Shark will automatically check whether the file exists or not  then do the proper action.
	$response: Your response or a file

		$this->set_responses($responses);

	Example:
		
		$this->set_responses("Hello! Im a shark!");

		or

		$this->set_responses("responses.txt");

	The most important thing I have to remind is that you have to use the JSON type for storing the file like this:
	
		{"Hi, ":"this ","is ":"shark."}

		Shark will automatically turn the key and value into your response in Plurk like this:

		>> Hi, this is shark.

	It is easy , isn't it !?

e.Save
	You can choose to save the shark's log or not. BTW, two records are saved as "sharlog" for each plurk. 
	One is "posted time" and the other is "permanent link". And all of them are wrapped in JSON format at the same time.

	$choice: true or false. The default is true

		$this->set_save($choice);

f.Run
	Run the program
		
		$this->run();

g.others
	In order to extend the flexibility of shark, I inherit the class from php-plurk-api. 
	This means that you can use any method from the class as you wish! Here comes some useful methods from the class:

		$this->add_plurk();
		$this->add_response();
		$this->add_all_as_friends();
		...

	If you want to know more methods about this, just go to the official site of php-plurk-api to check it !

Recommend
=========
This program is advised to run on Command Line Interface(CLI).

Author
======

EragonJ@hax4.in 陳佳隆

*Email:* jack.xxlong@gmail.com

*Blog:* [Here](http://eragonj.hax4.in)
